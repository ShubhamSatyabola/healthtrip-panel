import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {blockUser, deleteKey, fetchAllUsers, getkeys, messageFrequency, postKey} from './AdminAPI';

const initialState = {
  users:[],
  keys:[],
  status: 'idle',
};

export const fetchAllUsersAsync = createAsyncThunk(
  'admin/fetchAllUser',
  async () => {
    const response = await fetchAllUsers();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const postApiKeyAsync = createAsyncThunk(
  "admin/postKey",
  async (key) => {
    const response = await postKey(key);
    // The value we return becomes the `fulfilled` action payload
    console.log(response);
    return response.data.newKey;
  }
);

export const getApiKeyAsync = createAsyncThunk(
  "admin/getKey",
  async () => {
    const response = await getkeys() ;
    return response.data;
  }
);

export const deleteApiKeyAsync = createAsyncThunk("admin/deleteKey", async (id) => {
  const response = await deleteKey(id);
   return response.data.deletedKey
});

export const blockUserAsync = createAsyncThunk(
  "admin/blockUser",
  async (userId) => {
    const response = await blockUser(userId)
    // The value we return becomes the `fulfilled` action payload
     console.log(response)
     return response.data.message;
  }
);

export const updateMessageFrequencyAsync = createAsyncThunk(
  "messageFrequency",
  async (time) => {
    const response = await messageFrequency(time)
    // The value we return becomes the `fulfilled` action payload
    console.log(response);
    return response.data;
  }
);


export const adminSlice = createSlice({
  name: 'admin',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllUsersAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchAllUsersAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.users = action.payload;
      })
      .addCase(postApiKeyAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(postApiKeyAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.keys.push(action.payload);
      })
      .addCase(getApiKeyAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getApiKeyAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.keys = action.payload;
      })
      .addCase(deleteApiKeyAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deleteApiKeyAsync.fulfilled, (state, action) => {
        state.status = "idle";
        const Index = state.keys.findIndex(
          (item) => item.id === action.payload._id
        );
        state.keys.splice(Index, 1);
      })
      .addCase(blockUserAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(blockUserAsync.fulfilled, (state, action) => {
        state.status = "idle";
        const Index = state.users.findIndex(
          (item) => item._id === action.payload._id
        );
        const updatedUser = [...state.users]
        updatedUser[Index] = action.payload
        state.users = updatedUser;
      });
  },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

export const selectUsers = (state) => state.admin.users;
export const selectkeys = (state) => state.admin.keys;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default adminSlice.reducer;
